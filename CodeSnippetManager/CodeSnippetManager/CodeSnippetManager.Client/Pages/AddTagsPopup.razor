@rendermode InteractiveAuto
@inject IHttpClientFactory clientFactory
@using CodeSnippetManager.Data.Models

<button class="btn-sm btn-outline-primary" @onclick="ShowModal">Create Tag</button>

<Modal IsVisible="isModalVisible" IsVisibleChanged="OnModalVisibilityChanged">
    <h2>Tags:</h2>
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Tag Name..." aria-label="TagName" aria-describedby="button-addon2" @bind="NewTagName">
        <button @onclick="addTag" class="btn btn-outline-primary" type="button" id="button-addon2">Add Tag</button>
    </div>
    <div class="d-flex flex-wrap overflow-auto">
            @foreach (var tag in Tags)
            {
                <div class="tag-card m-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-10 snippet-card-padding">
                                <span class="text-wrap flex-grow-1 text-break">@tag.Name </span>
                            </div>
                            <div class="col-2 snippet-card-padding">
                                <label class="close-tag" @onclick="()=>DeleteTag(tag.Id)">&times;</label>
                            </div>
                        </div>
                    </div>
                </div>
            }
    </div>
</Modal>

@code {
    public List<Tag> Tags = [];
    public string NewTagName = "";
    protected override async Task OnInitializedAsync()
    {
        await refreshTags();
    }


    protected async Task addTag()
    {
        Tag newTag = new() { Name = NewTagName};
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "Tags/Add");
        request.Content = JsonContent.Create(newTag);
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();
        await refreshTags();
        Console.WriteLine(content);
    }

    protected async Task refreshTags()
    {
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "Tags/GetAll");
        var response = await client.SendAsync(request);
        Tags = await response.Content.ReadFromJsonAsync<List<Tag>>();
        foreach (var tag in Tags)
        {
            Console.WriteLine(tag.Name);
        }
    }


    private async Task DeleteTag(int tagId)
    {
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "Tags/Delete");
        request.Content = JsonContent.Create(tagId);
        var response = await client.SendAsync(request);
        Console.WriteLine(response.Content);

        await refreshTags();
    }


    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void OnModalVisibilityChanged(bool visible)
    {
        isModalVisible = visible;
    }
}