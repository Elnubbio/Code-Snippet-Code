@rendermode InteractiveAuto
@inject IHttpClientFactory clientFactory
@using CodeSnippetManager.Data.Models

<button class="btn-sm btn-outline-primary" @onclick="ShowModal">Create Snippet</button>

<Modal IsVisible="isModalVisible" IsVisibleChanged="OnModalVisibilityChanged" OnModalOpened="OnModalOpened">
    <h2>Code:</h2>
    <div class="pm0">
        <div class="row">
            <div>
                <textarea @bind="SnippetTitle"></textarea>
            </div>
            <div class="col-10 d-flex">
                <textarea @bind="SnippetText" class="" style="flex:1;"></textarea>
            </div>
            <div class="col-2 d-flex">
                <Select class="selectpicker" multiple aria-label="multiple select example" style="flex:1;" @onchange="OnSelectionChanged">>
                    @foreach (Tag tag in Tags)
                    {
                        @* <option @onclick="() => AddToTagList(tag)">@tag.Name</option> *@
                        <option value="@tag.Name">@tag.Name</option>
                    }
                </Select>
            </div>
        </div>
    </div>



    
    <button class="btn-sm btn-outline-primary" @onclick="SaveSnippet">Save Snippet</button>
    <button class="btn-sm btn-outline-primary" @onclick="GetSnippets">Snippets</button>
</Modal>

@code {
    protected override async Task OnInitializedAsync()
    {
        await GetTags();
    }


    public string SnippetText = "";
    public string SnippetTitle = "";
    List<Tag> Tags = new List<Tag>();
    List<string> SelectedTags = new List<string>();
    protected async Task SaveSnippet()
    {
        Snippet snipTest = new() { Content = SnippetText, Title = SnippetTitle};
        snipTest.Tags = Tags.Where(tag => SelectedTags.Contains(tag.Name)).ToList();
        Console.WriteLine(snipTest.Tags.Count());
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "Snippets/Add");
        request.Content = JsonContent.Create(snipTest);
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();
        Console.WriteLine(content);
    }

    protected async Task GetSnippets()
    {
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "Snippets/GetAll");
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();
        Console.WriteLine(content);
    }
    protected async Task GetTags()
    {
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "Tags/GetAll");
        var response = await client.SendAsync(request);
        foreach (var tag in Tags)
        {
            Console.WriteLine(tag.Name);
        }
        Tags = await response.Content.ReadFromJsonAsync<List<Tag>>();
    }

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        var selectedValues = ((IEnumerable<string>)e.Value).ToList();
        SelectedTags = selectedValues;

        foreach (string tagA in SelectedTags)
        {
            Console.WriteLine(tagA);
        }
        Console.WriteLine(SelectedTags.Count);
    }

    protected async Task AddTag()
    {
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "Snippets/GetAll");
        var response = await client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();
        Console.WriteLine(content);
    }

    private bool isModalVisible = false;

    private async void ShowModal()
    {
        isModalVisible = true;
        await GetTags();
    }

    private void OnModalVisibilityChanged(bool visible)
    {
        isModalVisible = visible;
    }

    private async Task OnModalOpened()
    {
        await GetTags();
    }
}