@rendermode InteractiveAuto
@using System.Net.Http.Json
@using CodeSnippetManager.Data.Models
@inject IHttpClientFactory clientFactory

<div class="d-flex flex-wrap overflow-auto">
@foreach (var snippet in listOfSnippets)
{        
    <div class="snippet-card m-3">
            <div class="container">
                <div class="row">
                    <div class="col-10 snippet-card-padding">
                        <span class="text-wrap flex-grow-1 text-break">@snippet.Content</span>
                    </div>
                    <div class="col-2 snippet-card-padding">
                        <span class="close-tag" style="float:right;" @onclick="()=>DeleteSnippet(snippet.Id)">&times;</span>
                    </div>
                </div>
            </div>
    </div>
            }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await RefreshSnippets();
    }

    List<Snippet> listOfSnippets { get; set; } = [];

    private async Task DeleteSnippet(int snippetId)
    {
        var client = clientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "Snippets/Delete");
        request.Content = JsonContent.Create(snippetId);
        var response = await client.SendAsync(request);
        Console.WriteLine(response.Content);

        await RefreshSnippets();
    }

    private async Task RefreshSnippets()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "Snippets/GetAll");
        var client = clientFactory.CreateClient();
        var response = await client.SendAsync(request);
        listOfSnippets = await response.Content.ReadFromJsonAsync<List<Snippet>>() ?? [];
        foreach (var snippet in listOfSnippets)
        {
            Console.WriteLine(snippet.Content);
        }
    }
}
